fieldset.text-field {
    --border: var(--input-border);
    --deltaY: 1.35rem;
    --deltaX: var(--input-padding-x);

    &:focus-within {
        --border: var(--element-primary);
    }

    &.error,
    &.error:focus-within {
        --border: var(--emphasis-negative);
    }

    &,
    * {
        box-sizing: border-box;
    }

    border-radius: var(--element-radius);

    input[type="text"] {
        align-self: center;
        margin: 0;
        position: relative;
        width: 100%;
        box-sizing: border-box;
        outline: none;
        border: 0;
        background: transparent;
        color: inherit;
    }

    legend {
        font-size: calc(var(--element-font-size) * 0.8);
        width: 0;
        padding: 0;
        display: block;
        white-space: nowrap;
        color: var(--text-primary);
        opacity: 0.5;
        transition: transform var(--transition-interaction);
        transform: translateY(calc(var(--deltaY) + var(--input-padding-y))) translateX(var(--deltaX)) scale(1.25);
        line-height: 1rem;
    }

    &.outlined {
        border: 1px solid var(--input-border);
        margin: 0 2px;
        padding: 0.35em 0.75em 0.625em;

        &:focus-within {
            border: 2px solid var(--element-primary);
            margin-left: 1px;
            margin-top: -1px;
        }
    }

    &.standard {
        border-top-width: 0;
        border-left: 0;
        border-right: 0;
        border-radius: 0;
        padding-left: 0;
        padding-bottom: 6px;
        border-color: var(--border);
    }

    &.simple {
        margin: 0;
        padding: 0;
        border: 0;

        input {
            border: 1px solid var(--border);
            border-radius: var(--element-radius);
            padding: 0.5rem;

            &:focus {
                margin: -1px;
                border: 2px solid var(--element-primary);
            }
        }

        legend {
            color: var(--text-primary);
            opacity: 1;
            padding: 0 !important;
            margin-left: 0;
            margin-bottom: 0.25rem;
            font-size: 0.9rem;
            transform: none;
        }
    }

    &.outlined,
    &.standard {

        &:focus-within,
        &:has(input:not(:placeholder-shown)) {
            legend {
                width: auto;
                padding: 0 2px;
                transition: top var(--transition-interaction), left var(--transition-interaction), transform var(--transition-interaction);
                transform: none;
                opacity: 1;
            }
        }

        &:focus-within legend {
            color: var(--element-primary);

        }
    }
}


input.toggle {
    position: relative;
    display: grid;
    place-content: center;
    appearance: none;
    background-color: var(--element-inactive);
    display: inline-block;
    width: 2rem;
    height: 1rem;
    top: 0.4em;
    border-radius: 50rem;

    &:checked {
        background-color: color-mix(in srgb, var(--element-primary) 50%, var(--bg-surface));
    }

    &::before {
        content: '';
        background-color: var(--bg-light);
        box-shadow: var(--element-elevation);
        display: block;
        position: absolute;
        width: 1.25rem;
        height: 1.25rem;
        border-radius: 50rem;
        margin: 0;
        top: -2px;
        left: -2px;
        transition: var(--transition-interaction) all;
    }

    &:checked::before {
        left: 50%;
        background-color: var(--element-primary);
    }
}


label.file-upload {
    display: block;
    padding: var(--padding-lg);
    border-radius: var(--element-radius);
    border: 1px dashed var(--border-primary);
    color: var(--text-secondary);

    input {
        display: none;
    }
}


input[type="radio"].radio {
    float: left;
    display: grid;
    place-content: center;
    appearance: none;
    background-color: var(--bg-surface);
    margin-right: 0.25rem;
    border-radius: 50%;
    border: 1px solid var(--input-border);
    overflow: hidden;

    &:checked::before {
        transform: scale(0.75);
    }

    &:checked {
        border: 1px solid var(--element-primary);

    }

    &::before {
        content: '';
        width: 0.75rem;
        height: 0.75rem;
        transform: scale(0);
        transition: var(--transition-interaction) all;
        background: var(--element-primary);
        border-radius: 50%;
    }
}


input[type="checkbox"].checkbox {
    float: left;
    display: grid;
    place-content: center;
    appearance: none;
    background-color: var(--bg-surface);
    margin-right: 0.25rem;
    border-radius: var(--element-radius);
    border: 1px solid var(--element-inactive);
    overflow: hidden;

    &:checked::before {
        transform: scale(1);
    }

    &:checked {
        border: 1px solid var(--element-primary);
    }

    &::before {
        content: '';
        width: 1rem;
        height: 1rem;
        transform: scale(0);
        transition: 120ms transform ease-in-out;
        background: var(--element-primary);
        background-size: contain;
    }
}

label:has(input.checkbox, input.radio, input.toggle) {
    width: fit-content;
    display: flex;
    gap: 0.25rem;
    align-items: center;
    cursor: pointer;
}